Sample test using data Phase3DemoNodeInsertData.txt and Phase3DemoEdgeInsertData.txt



➜  src git:(master) ✗ ls
META-INF       ZIndex         bufmgr         chainexception edgeheap       graphtests     index          javadoc        nodeheap
Makefile       btree          catalog        diskmgr        global         heap           iterator       lib            tests
➜  src git:(master) ✗ make graphtest 
cd graphtests; make graphtest;
/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home//bin/javac -classpath .:.. GraphTest.java GraphDBManager.java Util.java BatchEdgeDeletion.java BatchEdgeInsertion.java BatchNodeDeletion.java BatchNodeInsertion.java SimpleEdgeQuery.java    SimpleNodeQuery.java
/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home//bin/java  -classpath .:.. graphtests.GraphTest
Please input your command (input "help" to learn supported operations, input "exit" to exit):
batchnodeinsert Phase3DemoNodeInsertData.txt yhc
Number of nodes: 7
Number of edges: 0
Number of disk pages that were read: 15
Number of disk pages that were written: 2
Batch nodes insertion completed successfully.

Please input your command (input "help" to learn supported operations, input "exit" to exit):
batchedgeinsert Phase3DemoEdgeInsertData.txt yhc
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 17
Number of disk pages that were written: 0
Batch edges insertion completed successfully.

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ1a yhc l:1/l:2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
Total number of paths: 10
Plan used (from current node to next node through NN):
Pi(Node) ((Pi(Edge) (Node |X| (source, edge_condition=null) Edge)) |X| (destination, node_condition=NN) Node)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ1a yhc l:1/l:3/l:2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
Total number of paths: 100
Plan used (from current node to next node through NN):
Pi(Node) ((Pi(Edge) (Node |X| (source, edge_condition=null) Edge)) |X| (destination, node_condition=NN) Node)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ1b l:1/l:3/l:2
Invalid command! Please input again!

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ1b yhc l:1/l:3/l:2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
1 -> 2
Total number of paths: 100
Plan used (from current node to next node through NN):
Pi(Node) ((Pi(Edge) (Node |X| (source, edge_condition=null) Edge)) |X| (destination, node_condition=NN) Node)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ1c yhc l:1/l:3/l:2
1 -> 2
Total number of paths: 1
Plan used (from current node to next node through NN):
Pi(Node) ((Pi(Edge) (Node |X| (source, edge_condition=null) Edge)) |X| (destination, node_condition=NN) Node)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ1a yhc d:(1,4,1,4,1)/d:(7,2,7,2,7)/d:(11,12,13,14,15)
10 -> 30
Total number of paths: 1
Plan used (from current node to next node through NN):
Pi(Node) ((Pi(Edge) (Node |X| (source, edge_condition=null) Edge)) |X| (destination, node_condition=NN) Node)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ1a yhc l:1/l:2/l:100
Total number of paths: 0
Plan used (from current node to next node through NN):
Pi(Node) ((Pi(Edge) (Node |X| (source, edge_condition=null) Edge)) |X| (destination, node_condition=NN) Node)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ2a yhc l:2/l:2_1/l:1_4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
2 -> 4
Total number of paths: 200
Plan used (from current node to next node through NN):
Pi(Node) ((Pi(Edge) (Node |X| (source, edge_condition=null) Edge)) |X| (destination, node_condition=NN) Node)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ2a yhc l:20/w:4
20 -> 30
Total number of paths: 1
Plan used (from current node to next node through NN):
Pi(Node) ((Pi(Edge) (Node |X| (source, edge_condition=null) Edge)) |X| (destination, node_condition=NN) Node)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ2a yhc l:20/w:1
Total number of paths: 0
Plan used (from current node to next node through NN):
Pi(Node) ((Pi(Edge) (Node |X| (source, edge_condition=null) Edge)) |X| (destination, node_condition=NN) Node)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ3a yhc d:(7,2,7,2,7)/n:2
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 1
	at graphtests.PathExpressionType3.Query(PathExpressionType3.java:122)
	at graphtests.GraphTest.main(GraphTest.java:124)
make[1]: *** [graphtest] Error 1
make: *** [graphtest] Error 2
➜  src git:(master) ✗ make graphtest
cd graphtests; make graphtest;
/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home//bin/javac -classpath .:.. GraphTest.java GraphDBManager.java Util.java BatchEdgeDeletion.java BatchEdgeInsertion.java BatchNodeDeletion.java BatchNodeInsertion.java SimpleEdgeQuery.java    SimpleNodeQuery.java
/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home//bin/java  -classpath .:.. graphtests.GraphTest
Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ3a yhc d:(7,2,7,2,7)//n:2
20 -> 30
20 -> 10
Total number of paths: 2
Query: Find the path with bound on num_edges, bound = 2
  SELECT edge.DestNID
 From edgeHeapFile edge
 WHERE edge.SrcNID = givenNID
 Plan used:
 |><| Sigma(edge.SrcNID = givenNID)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
PQ3a yhc d:(7,2,7,2,7)//w:1
Total number of paths: 0
Query: Find the path with bound on total_edge_weight, bound = 1
  SELECT edge.DestNID
 From edgeHeapFile edge
 WHERE edge.SrcNID = givenNID && edge.weight <= given_Remaining_Weight
 Plan used:
 |><| Sigma(edge.SrcNID = givenNID && edge.weight <= given_Remaining_Weight)
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
TQa yhc l:4_1;l:1_3;l:3_4
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
Total number of triangles: 2000
Plan used: 
    Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID)
    Sigma(Edge1.label = "4_1", Edge2.label = "1_3", Edge3.label = "3_4", Edge1.source_NID = Edge.dest_NID, Edge2.dest_NID = Edge.source_NID 
       ((Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID, Edge1.label, Edge2.label, Edge1.weight, Edge2.weight) 
       (Edge1 |><| Edge2)) 
           |><| Edge)
   --- Edge1, Edge2 and Edge are all file scan on edge heap file, 
   --- first use sort-merge join on Edge1 and Edge2, the second join is nested-loop join.
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
TQb yhc l:4_1;l:1_3;l:3_4
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
4 -> 1 -> 3
Total number of triangles: 2000
Plan used: 
    SORT Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID)
    Sigma(Edge1.label = "4_1", Edge2.label = "1_3", Edge3.label = "3_4", Edge1.source_NID = Edge.dest_NID, Edge2.dest_NID = Edge.source_NID 
       ((Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID, Edge1.label, Edge2.label, Edge1.weight, Edge2.weight) 
       (Edge1 |><| Edge2)) 
           |><| Edge)
   --- Edge1, Edge2 and Edge are all file scan on edge heap file, 
   --- first use sort-merge join on Edge1 and Edge2, the second join is nested-loop join.
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 57
Number of disk pages that were written: 1157

Please input your command (input "help" to learn supported operations, input "exit" to exit):
TQc yhc l:4_1;l:1_3;l:3_4        
4 -> 1 -> 3
Total number of triangles: 1
Plan used: 
    DISTINCT Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID)
    Sigma(Edge1.label = "4_1", Edge2.label = "1_3", Edge3.label = "3_4", Edge1.source_NID = Edge.dest_NID, Edge2.dest_NID = Edge.source_NID 
       ((Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID, Edge1.label, Edge2.label, Edge1.weight, Edge2.weight) 
       (Edge1 |><| Edge2)) 
           |><| Edge)
   --- Edge1, Edge2 and Edge are all file scan on edge heap file, 
   --- first use sort-merge join on Edge1 and Edge2, the second join is nested-loop join.
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 57
Number of disk pages that were written: 1157

Please input your command (input "help" to learn supported operations, input "exit" to exit):
TQa yhc l:81;l:82;l:83
10 -> 20 -> 30
Total number of triangles: 1
Plan used: 
    Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID)
    Sigma(Edge1.label = "81", Edge2.label = "82", Edge3.label = "83", Edge1.source_NID = Edge.dest_NID, Edge2.dest_NID = Edge.source_NID 
       ((Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID, Edge1.label, Edge2.label, Edge1.weight, Edge2.weight) 
       (Edge1 |><| Edge2)) 
           |><| Edge)
   --- Edge1, Edge2 and Edge are all file scan on edge heap file, 
   --- first use sort-merge join on Edge1 and Edge2, the second join is nested-loop join.
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
TQa yhc l:81;l:1_2;l:2_3
Total number of triangles: 0
Plan used: 
    Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID)
    Sigma(Edge1.label = "81", Edge2.label = "1_2", Edge3.label = "2_3", Edge1.source_NID = Edge.dest_NID, Edge2.dest_NID = Edge.source_NID 
       ((Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID, Edge1.label, Edge2.label, Edge1.weight, Edge2.weight) 
       (Edge1 |><| Edge2)) 
           |><| Edge)
   --- Edge1, Edge2 and Edge are all file scan on edge heap file, 
   --- first use sort-merge join on Edge1 and Edge2, the second join is nested-loop join.
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 31
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
TQa yhc w:5;w:5;w:10
30 -> 10 -> 20
10 -> 20 -> 30
20 -> 30 -> 10
Total number of triangles: 3
Plan used: 
    Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID)
    Sigma(Edge1.weight = "5", Edge2.weight = "5", Edge3.weight = "10", Edge1.source_NID = Edge.dest_NID, Edge2.dest_NID = Edge.source_NID 
       ((Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID, Edge1.label, Edge2.label, Edge1.weight, Edge2.weight) 
       (Edge1 |><| Edge2)) 
           |><| Edge)
   --- Edge1, Edge2 and Edge are all file scan on edge heap file, 
   --- first use sort-merge join on Edge1 and Edge2, the second join is nested-loop join.
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 32
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
TQa yhc w:2;w:2;w:2
Total number of triangles: 0
Plan used: 
    Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID)
    Sigma(Edge1.weight = "2", Edge2.weight = "2", Edge3.weight = "2", Edge1.source_NID = Edge.dest_NID, Edge2.dest_NID = Edge.source_NID 
       ((Pi(Edge1.source_NID, Edge1.dest_NID, Edge2.dest_NID, Edge1.label, Edge2.label, Edge1.weight, Edge2.weight) 
       (Edge1 |><| Edge2)) 
           |><| Edge)
   --- Edge1, Edge2 and Edge are all file scan on edge heap file, 
   --- first use sort-merge join on Edge1 and Edge2, the second join is nested-loop join.
Number of nodes: 7
Number of edges: 163
Number of disk pages that were read: 31
Number of disk pages that were written: 0

Please input your command (input "help" to learn supported operations, input "exit" to exit):
exit
Graph database closed.
➜  src git:(master) ✗ 